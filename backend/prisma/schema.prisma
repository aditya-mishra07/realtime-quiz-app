// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AnswerNum {
  ONE 
  TWO
  THREE
  FOUR
}

enum State {
  not_started
  waiting
  question
  leaderboard
  ended
}

enum Visibility {
  private
  public
}

model User {
  id String @id
  username String @unique
  points Int @default(0)
  quizId Int?
  submissions Submission[]
  quiz Quiz? @relation(fields: [quizId], references: [id])
}

model Quiz { 
  id Int @id @default(autoincrement())
  hasStarted Boolean @default(false)
  currentState State @default(not_started)
  title String
  users User[]
  questions Question[]
  adminId Int?
  admin Admin? @relation(fields: [adminId], references: [id])
  type Visibility @default(private)
}

model Option {
  id Int @id @default(autoincrement())
  text String
  votes Int @default(0)
  questionId Int?
  question Question? @relation(fields: [questionId], references: [id])
}

model Question {
  id Int @id @default(autoincrement())
  text String
  options Option[]
  answer AnswerNum @default(ONE)
  startTime Int? @default(0)
  quizId Int?
  quiz Quiz? @relation(fields: [quizId], references: [id])
  submission Submission[]
}

model Submission {
  id Int @id @default(autoincrement())
  questionId Int?
  userId String?
  isCorrect Boolean?
  optionSelected AnswerNum?
  question Question? @relation(fields: [questionId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

model Admin {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  quizes Quiz[]
}
